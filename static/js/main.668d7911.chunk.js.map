{"version":3,"sources":["views/PriceDifference.js","views/NewsFeed.js","App.js","serviceWorker.js","index.js"],"names":["PriceDifference","oldPrice","newPrice","message","console","log","NewsFeed","array","data","slice","map","item","className","key","guid","href","link","target","rel","src","enclosure","url","alt","title","App","props","fetchPrice","coin","axios","get","state","currency","then","response","price","setState","fetchedPrice","catch","error","e","fetchNews","URL","parser","RSSParser","a","parseURL","feed","items","forEach","fetchedNews","formValue","handleChange","bind","handleSubmit","event","this","value","preventDefault","setInterval","onSubmit","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"scAiBeA,EAjBS,SAACC,EAAUC,GACjC,IAAIC,EAAU,GAad,OAXIF,EAAW,IACbG,QAAQC,IAAI,4BAEVF,EADED,EAAWD,EACH,gBAEA,kBAGZE,EAAO,iBADPA,GAAW,mCACJ,aAGFA,GCSMG,EArBE,SAACC,GAkBhB,OAjBWA,EAAMC,KAAKC,MAAM,EAAE,GAAGC,KAAI,SAASC,GAC5C,OACE,yBAAKC,UAAU,6CAA6CC,IAAKF,EAAKG,MACpE,uBAAGC,KAAMJ,EAAKK,KAAMC,OAAO,SAASC,IAAI,uBACtC,yBAAKC,IAAKR,EAAKS,UAAUC,IAAKC,IAAKX,EAAKY,SAE1C,yBAAKX,UAAU,aACb,uBAAGA,UAAU,yBACX,uBAAGG,KAAMJ,EAAKK,KAAMC,OAAO,SAASC,IAAI,uBACrCP,EAAKY,cC4HLC,G,0BA9Hb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgCRC,WAAa,SAACC,GACZvB,QAAQC,IAAI,eACZ,IACEuB,IAAMC,IAAN,4DAA+D,EAAKC,MAAMH,KAA1E,0BAAgG,EAAKG,MAAMC,WACxGC,MAAK,SAAAC,GACJ,IAAIC,EAAQD,EAASzB,KAAK,EAAKsB,MAAMH,MAAM,EAAKG,MAAMC,UAClD,EAAKD,MAAM7B,WAAaiC,GAC1B,EAAKC,SAAS,CAAElC,SAAU,EAAK6B,MAAMI,QAEvC,EAAKC,SAAS,CACZD,QACAE,cAAc,OAGjBC,OAAM,SAAAC,GACLlC,QAAQC,IAAIiC,MAEhB,MAAMC,GACNnC,QAAQC,IAAIkC,KAnDG,EAwDnBC,UAAY,SAACb,GACXvB,QAAQC,IAAI,cACZ,IAAMoC,EAAG,4CAAwC,EAAKX,MAAMH,MAExDe,EAAS,IAAIC,IACjB,sBAAC,4BAAAC,EAAA,sEACkBF,EAAOG,SAHP,uCAG6BJ,GAD/C,QACKK,EADL,QAEMC,MAAMC,SAAQ,SAAArC,OAInB,EAAKwB,SAAS,CACZW,KAAMA,EAAKC,MACXE,aAAa,IARhB,0CAAD,IA1DA,EAAKnB,MAAQ,CACXI,MAAO,EACPjC,SAAU,EACV0B,KAAM,WACNI,SAAU,MACVe,KAAM,GACNG,aAAa,EACbb,cAAc,EACdc,UAAW,IAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAK1B,WAAa,EAAKA,WAAW0B,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAjBA,E,0EAoBNE,GACXC,KAAKpB,SAAS,CAACqB,MAAOF,EAAMrC,OAAOuC,U,mCAGxBF,GAEXC,KAAKpB,SAAS,CACZR,KAAM4B,KAAKzB,MAAM0B,MACjBpB,cAAc,IAEhBkB,EAAMG,mB,0CA6CNF,KAAK7B,aACLgC,YAAYH,KAAK7B,WAAY,KAC7B6B,KAAKf,YACLkB,YAAYH,KAAKf,UAAW,O,+BAI5B,OACE,yBAAK5B,UAAU,yBACZ2C,KAAKzB,MAAMM,cAAgBmB,KAAKzB,MAAMmB,YACrC,yBAAKrC,UAAU,QACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,+BACf,0BAAM+C,SAAUJ,KAAKF,cACnB,yBAAKzC,UAAU,wCACb,yBAAKA,UAAU,YACb,2BACEgD,KAAK,OACLhD,UAAU,mBACViD,YAAY,oBACZL,MAAOD,KAAKzB,MAAM0B,MAClBM,SAAUP,KAAKJ,gBAGnB,yBAAKvC,UAAU,YACb,2BACEA,UAAU,sBACVgD,KAAK,SACLJ,MAAM,cAKZ,wBAAI5C,UAAU,QAAd,wBAA0C,0BAAMA,UAAU,QAAQ2C,KAAKzB,MAAMH,MAA7E,OACA,wBAAIf,UAAU,cAAc2C,KAAKzB,MAAMI,MAAvC,IAA8C,0BAAMtB,UAAU,YAAY2C,KAAKzB,MAAMC,WACrF,kBAAC,EAAD,CAAiB9B,SAAUsD,KAAKzB,MAAM7B,SAAUC,SAAUqD,KAAKzB,MAAM5B,aAGzE,yBAAKU,UAAU,mCACZ2C,KAAKzB,MAAMmB,YAAc,kBAAC,EAAD,CAAUzC,KAAM+C,KAAKzB,MAAMgB,OAAW,4CAItE,+C,GAvHUiB,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.668d7911.chunk.js","sourcesContent":["const PriceDifference = (oldPrice, newPrice) => {\r\n  let message = '';\r\n\r\n  if (oldPrice > 0) {\r\n    console.log('old price greater than 0');\r\n    if (newPrice > oldPrice) {\r\n      message = 'Just went up!';\r\n    } else {\r\n      message = 'Just went down!';\r\n    }\r\n    message += ' Price was previously {oldPrice}';\r\n    message = `<small>${message}</small>`;\r\n  }\r\n\r\n  return message;\r\n}\r\n\r\nexport default PriceDifference;\r\n","import React from 'react';\r\n\r\nconst NewsFeed = (array) => {\r\n  let feed = array.data.slice(0,3).map(function(item){\r\n    return (\r\n      <div className=\"col-12 col-md-3 news-item text-center card\" key={item.guid}>\r\n        <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={item.enclosure.url} alt={item.title}/>\r\n        </a>\r\n        <div className=\"news-text\">\r\n          <p className=\"font-weight-bold mb-0\">\r\n            <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {item.title}\r\n            </a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return feed;\r\n}\r\n\r\nexport default NewsFeed;\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport RSSParser from 'rss-parser';\nimport PriceDifference from './views/PriceDifference';\nimport NewsFeed from './views/NewsFeed';\n// import TextForm from './views/TextForm';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props); \n\n    this.state = {\n      price: 0,\n      oldPrice: 0,\n      coin: 'ethereum',\n      currency: 'usd',\n      feed: [],\n      fetchedNews: false,\n      fetchedPrice: false,\n      formValue: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchPrice = this.fetchPrice.bind(this);\n    this.fetchNews = this.fetchNews.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    // alert(this.state.value);\n    this.setState({ \n      coin: this.state.value,\n      fetchedPrice: false\n    });\n    event.preventDefault();\n  }\n\n  fetchPrice = (coin) => {\n    console.log('price fetch');\n    try {\n      axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=${this.state.coin}&vs_currencies=${this.state.currency}`)\n        .then(response => {\n          let price = response.data[this.state.coin][this.state.currency];\n          if (this.state.oldPrice !== price) {\n            this.setState({ oldPrice: this.state.price });\n          }\n          this.setState({\n            price,\n            fetchedPrice: true\n          });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  // fetchNews() {\n  fetchNews = (coin) => {\n    console.log('news fetch');\n    const URL = `https://cointelegraph.com/rss/tag/${this.state.coin}`;\n    const CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';\n    let parser = new RSSParser();\n    (async () => {\n      let feed = await parser.parseURL(CORS_PROXY + URL);\n      feed.items.forEach(item => {\n        // console.log(item);\n      });\n      // console.log(feed.items);\n      this.setState({ \n        feed: feed.items,\n        fetchedNews: true\n      })\n    })();\n  }\n\n  componentDidMount() {\n    this.fetchPrice();\n    setInterval(this.fetchPrice, 5000);\n    this.fetchNews();\n    setInterval(this.fetchNews, 5000);\n  }\n\n  render () {\n    return (\n      <div className=\"container text-center\">\n        {this.state.fetchedPrice && this.state.fetchedNews ? (\n          <div className=\"mt-4\">\n            <div className=\"row flex-column\">\n              <div className=\"col-12 offset-md-3 col-md-6\">\n              <form onSubmit={this.handleSubmit}>\n                <div className=\"form-row justify-content-center mb-3\">\n                  <div className=\"col-auto\">\n                    <input \n                      type=\"text\"\n                      className=\"p-1 form-control\"\n                      placeholder=\"Name of crypto...\" \n                      value={this.state.value} \n                      onChange={this.handleChange} \n                    />\n                  </div>\n                  <div className=\"col-auto\">\n                    <input \n                      className=\"p-1 btn btn-primary\"\n                      type=\"submit\" \n                      value=\"Search\" \n                    />\n                  </div>\n                </div>\n              </form>\n                <h3 className=\"mb-0\">The current price of <span className=\"coin\">{this.state.coin}</span> is</h3>\n                <h1 className=\"price mt-0\">{this.state.price} <span className=\"currency\">{this.state.currency}</span></h1>\n                <PriceDifference oldPrice={this.state.oldPrice} newPrice={this.state.newPrice} />\n              </div>\n            </div>\n            <div className=\"row justify-content-center mt-2\">\n              {this.state.fetchedNews ? <NewsFeed data={this.state.feed} /> : <h4>Loading...</h4>}\n            </div>\n          </div>\n        ) : ( \n        <h4>\n          Loading...\n        </h4> ) }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}